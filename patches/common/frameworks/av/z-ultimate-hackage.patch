diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index 7b4180f..14d8878 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -1063,7 +1078,12 @@ status_t OMXCodec::getVideoProfileLevel(
     OMX_VIDEO_PARAM_PROFILELEVELTYPE param;
     InitOMXParams(&param);
     param.nPortIndex = kPortIndexOutput;
+#if 0
     for (param.nProfileIndex = 0;; ++param.nProfileIndex) {
+#endif
+#if 1
+    for (param.nProfileIndex = 1;; ++param.nProfileIndex) {
+#endif
         status_t err = mOMX->getParameter(
                 mNode, OMX_IndexParamVideoProfileLevelQuerySupported,
                 &param, sizeof(param));
@@ -1075,15 +1095,19 @@ status_t OMXCodec::getVideoProfileLevel(
         CODEC_LOGV("Supported profile: %d, level %d",
             supportedProfile, supportedLevel);
 
+#if 0
         if (profile == supportedProfile &&
             level <= supportedLevel) {
+#endif
             // We can further check whether the level is a valid
             // value; but we will leave that to the omx encoder component
             // via OMX_SetParameter call.
             profileLevel.mProfile = profile;
             profileLevel.mLevel = level;
             return OK;
+#if 0
         }
+#endif
     }
 
     CODEC_LOGE("Target profile (%d) and level (%d) is not supported",
@@ -1213,7 +1237,7 @@ status_t OMXCodec::setupAVCEncoderParameters(const sp<MetaData>& meta) {
     defaultProfileLevel.mProfile = h264type.eProfile;
     defaultProfileLevel.mLevel = h264type.eLevel;
     err = getVideoProfileLevel(meta, defaultProfileLevel, profileLevel);
-    if (err != OK) return err;
+    //if (err != OK) return err;
     h264type.eProfile = static_cast<OMX_VIDEO_AVCPROFILETYPE>(profileLevel.mProfile);
     h264type.eLevel = static_cast<OMX_VIDEO_AVCLEVELTYPE>(profileLevel.mLevel);
 
